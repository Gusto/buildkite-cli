# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for types exported from the `tty-markdown` gem.
# Please instead update this file by running `bin/tapioca gem tty-markdown`.

# source://tty-markdown//lib/tty/markdown/kramdown_ext.rb#5
module Kramdown
  class << self
    # source://kramdown/2.4.0/lib/kramdown/document.rb#49
    def data_dir; end
  end
end

# source://tty-markdown//lib/tty/markdown/kramdown_ext.rb#6
module Kramdown::Parser; end

# source://tty-markdown//lib/tty/markdown/kramdown_ext.rb#7
class Kramdown::Parser::KramdownExt < ::Kramdown::Parser::Kramdown
  # @return [KramdownExt] a new instance of KramdownExt
  #
  # source://tty-markdown//lib/tty/markdown/kramdown_ext.rb#8
  def initialize(source, options); end
end

# source://tty-markdown//lib/tty/markdown/kramdown_ext.rb#17
Kramdown::Parser::KramdownExt::FENCED_CODEBLOCK_MATCH = T.let(T.unsafe(nil), Regexp)

# source://tty-markdown//lib/tty/markdown/kramdown_ext.rb#16
Kramdown::Parser::KramdownExt::FENCED_CODEBLOCK_START = T.let(T.unsafe(nil), Regexp)

# source://tty-markdown//lib/tty/markdown/syntax_highlighter.rb#6
module TTY; end

# Responsible for converting Markdown to the terminal output
#
# @api public
#
# source://tty-markdown//lib/tty/markdown/syntax_highlighter.rb#7
module TTY::Markdown
  private

  # Build symbols hash from the provided symbols option
  #
  # @api private
  # @param symbols [Hash, String, Symbol, nil] the converted output symbols
  # @return [Hash{Symbol => String}]
  #
  # source://tty-markdown//lib/tty/markdown.rb#192
  def build_symbols(symbols); end

  # Build theme hash from the provided theme option
  #
  # @api private
  # @param theme [Hash{Symbol => Array, String, Symbol}, nil] the converted output theme
  # @return [Hash{Symbol => Array<Symbol>}]
  #
  # source://tty-markdown//lib/tty/markdown.rb#228
  def build_theme(theme); end

  # Convert color option to Pastel option
  #
  # @api private
  # @param color [String, Symbol] the color option to convert
  # @return [Boolean, nil]
  #
  # source://tty-markdown//lib/tty/markdown.rb#175
  def color_enabled(color); end

  # Parse a markdown string
  #
  # @api public
  # @example
  #   TTY::Markdown.parse("# Header")
  # @param color [String, Symbol] the output coloring support out of always, auto or never
  # @param indent [Integer] the converted output indent
  # @param symbols [Hash, String, Symbol, nil] the converted output symbols
  # @param theme [Hash{Symbol => Array, String, Symbol}, nil] the converted output color theme
  # @param width [Integer] the width at which to wrap content
  # @param doc_opts [Hash] the markdown document parser options
  # @param mode [Integer] the number of supported colors
  # @param source [String] the source with markdown
  # @return [String] the converted terminal output
  #
  # source://tty-markdown//lib/tty/markdown.rb#126
  def parse(source, color: T.unsafe(nil), indent: T.unsafe(nil), mode: T.unsafe(nil), symbols: T.unsafe(nil), theme: T.unsafe(nil), width: T.unsafe(nil), **doc_opts); end

  # Parse a markdown document
  #
  # @api public
  # @example
  #   TTY::Markdown.parse_file("example.md")
  # @param path [String] the file path
  # @param options [Hash] the conversion options
  # @return [String] the converted terminal output
  #
  # source://tty-markdown//lib/tty/markdown.rb#162
  def parse_file(path, **options); end

  # Select between ASCII or Unicode symbols
  #
  # @api private
  # @param name [String, Symbol, nil] the symbols name
  # @return [Hash{Symbol => String}]
  #
  # source://tty-markdown//lib/tty/markdown.rb#214
  def select_symbols(name); end

  class << self
    # Parse a markdown string
    #
    # @api public
    # @example
    #   TTY::Markdown.parse("# Header")
    # @param color [String, Symbol] the output coloring support out of always, auto or never
    # @param indent [Integer] the converted output indent
    # @param symbols [Hash, String, Symbol, nil] the converted output symbols
    # @param theme [Hash{Symbol => Array, String, Symbol}, nil] the converted output color theme
    # @param width [Integer] the width at which to wrap content
    # @param doc_opts [Hash] the markdown document parser options
    # @param mode [Integer] the number of supported colors
    # @param source [String] the source with markdown
    # @return [String] the converted terminal output
    #
    # source://tty-markdown//lib/tty/markdown.rb#126
    def parse(source, color: T.unsafe(nil), indent: T.unsafe(nil), mode: T.unsafe(nil), symbols: T.unsafe(nil), theme: T.unsafe(nil), width: T.unsafe(nil), **doc_opts); end

    # Parse a markdown document
    #
    # @api public
    # @example
    #   TTY::Markdown.parse_file("example.md")
    # @param path [String] the file path
    # @param options [Hash] the conversion options
    # @return [String] the converted terminal output
    #
    # source://tty-markdown//lib/tty/markdown.rb#162
    def parse_file(path, **options); end

    private

    # Build symbols hash from the provided symbols option
    #
    # @api private
    # @param symbols [Hash, String, Symbol, nil] the converted output symbols
    # @return [Hash{Symbol => String}]
    #
    # source://tty-markdown//lib/tty/markdown.rb#192
    def build_symbols(symbols); end

    # Build theme hash from the provided theme option
    #
    # @api private
    # @param theme [Hash{Symbol => Array, String, Symbol}, nil] the converted output theme
    # @return [Hash{Symbol => Array<Symbol>}]
    #
    # source://tty-markdown//lib/tty/markdown.rb#228
    def build_theme(theme); end

    # Convert color option to Pastel option
    #
    # @api private
    # @param color [String, Symbol] the color option to convert
    # @return [Boolean, nil]
    #
    # source://tty-markdown//lib/tty/markdown.rb#175
    def color_enabled(color); end

    # Select between ASCII or Unicode symbols
    #
    # @api private
    # @param name [String, Symbol, nil] the symbols name
    # @return [Hash{Symbol => String}]
    #
    # source://tty-markdown//lib/tty/markdown.rb#214
    def select_symbols(name); end
  end
end

# @api public
#
# source://tty-markdown//lib/tty/markdown.rb#51
TTY::Markdown::ASCII_SYMBOLS = T.let(T.unsafe(nil), Hash)

# Converts a Kramdown::Document tree to a terminal friendly output
#
# source://tty-markdown//lib/tty/markdown/converter.rb#14
class TTY::Markdown::Converter < ::Kramdown::Converter::Base
  # @return [Converter] a new instance of Converter
  #
  # source://tty-markdown//lib/tty/markdown/converter.rb#18
  def initialize(root, options = T.unsafe(nil)); end

  # Invoke an element conversion
  #
  # @api public
  #
  # source://tty-markdown//lib/tty/markdown/converter.rb#36
  def convert(el, opts = T.unsafe(nil)); end

  private

  # Render horizontal border line
  #
  # @api private
  # @param column_widths [Array<Integer>] the table column widths
  # @param location [Symbol] location out of :top, :mid, :bottom
  # @return [String]
  #
  # source://tty-markdown//lib/tty/markdown/converter.rb#477
  def border(column_widths, location); end

  # Convert a element
  #
  # @api private
  # @param el [Kramdown::Element] the `kd:a` element
  # @param opts [Hash] the element options
  #
  # source://tty-markdown//lib/tty/markdown/converter.rb#641
  def convert_a(el, opts); end

  # Convert abbreviation element
  #
  # @api private
  # @param el [Kramdown::Element] the `kd:abbreviation` element
  # @param opts [Hash] the element options
  #
  # source://tty-markdown//lib/tty/markdown/converter.rb#695
  def convert_abbreviation(el, opts); end

  # Convert new line element
  #
  # @api private
  # @param el [Kramdown::Element] the `kd:blank` element
  # @param opts [Hash] the element options
  #
  # source://tty-markdown//lib/tty/markdown/converter.rb#208
  def convert_blank(*_arg0); end

  # Convert blockquote element
  #
  # @api private
  # @param el [Kramdown::Element] the `kd:blockquote` element
  # @param opts [Hash] the element options
  #
  # source://tty-markdown//lib/tty/markdown/converter.rb#264
  def convert_blockquote(el, opts); end

  # source://tty-markdown//lib/tty/markdown/converter.rb#615
  def convert_br(el, opts); end

  # Convert codeblock element
  #
  # @api private
  # @param el [Kramdown::Element] the `kd:codeblock` element
  # @param opts [Hash] the element options
  #
  # source://tty-markdown//lib/tty/markdown/converter.rb#251
  def convert_codeblock(el, opts); end

  # Convert codespan element
  #
  # @api private
  # @param el [Kramdown::Element] the `kd:codespan` element
  # @param opts [Hash] the element options
  #
  # source://tty-markdown//lib/tty/markdown/converter.rb#232
  def convert_codespan(el, opts); end

  # Convert xml comment element
  #
  # @api private
  # @param element [Kramdown::Element] the `kd:xml_comment` element
  # @param opts [Hash] the element options
  #
  # source://tty-markdown//lib/tty/markdown/converter.rb#803
  def convert_comment(el, opts); end

  # Convert dd element
  #
  # @api private
  # @param el [Kramdown::Element] the `kd:dd` element
  # @param opts [Hash] the element options
  #
  # source://tty-markdown//lib/tty/markdown/converter.rb#335
  def convert_dd(el, opts); end

  # Convert ordered and unordered list element
  #
  # @api private
  # @param el [Kramdown::Element] the `kd:ul` or `kd:ol` element
  # @param opts [Hash] the element options
  #
  # source://tty-markdown//lib/tty/markdown/converter.rb#284
  def convert_dl(el, opts); end

  # Convert dt element
  #
  # @api private
  # @param el [Kramdown::Element] the `kd:dt` element
  # @param opts [Hash] the element options
  #
  # source://tty-markdown//lib/tty/markdown/converter.rb#321
  def convert_dt(el, opts); end

  # Convert em element
  #
  # @api private
  # @param el [Kramdown::Element] the `kd:em` element
  # @param opts [Hash] the element options
  #
  # source://tty-markdown//lib/tty/markdown/converter.rb#192
  def convert_em(el, opts); end

  # source://tty-markdown//lib/tty/markdown/converter.rb#708
  def convert_entity(el, opts); end

  # Convert image element
  #
  # @api private
  # @param element [Kramdown::Element] the `kd:footnote` element
  # @param opts [Hash] the element options
  #
  # source://tty-markdown//lib/tty/markdown/converter.rb#725
  def convert_footnote(el, opts); end

  # Convert header element
  #
  # @api private
  # @param el [Kramdown::Element] the `kd:header` element
  # @param opts [Hash] the element options
  #
  # source://tty-markdown//lib/tty/markdown/converter.rb#104
  def convert_header(el, opts); end

  # Convert hr element
  #
  # @api private
  # @param el [Kramdown::Element] the `kd:hr` element
  # @param opts [Hash] the element options
  #
  # source://tty-markdown//lib/tty/markdown/converter.rb#627
  def convert_hr(el, opts); end

  # Convert html element
  #
  # @api private
  # @param element [Kramdown::Element] the `kd:html_element` element
  # @param opts [Hash] the element options
  #
  # source://tty-markdown//lib/tty/markdown/converter.rb#770
  def convert_html_element(el, opts); end

  # Convert image element
  #
  # @api private
  # @param element [Kramdown::Element] the `kd:img` element
  # @param opts [Hash] the element options
  #
  # source://tty-markdown//lib/tty/markdown/converter.rb#751
  def convert_img(el, opts); end

  # Convert list element
  #
  # @api private
  # @param el [Kramdown::Element] the `kd:li` element
  # @param opts [Hash] the element options
  #
  # source://tty-markdown//lib/tty/markdown/converter.rb#301
  def convert_li(el, opts); end

  # Convert math element
  #
  # @api private
  # @param el [Kramdown::Element] the `kd:math` element
  # @param opts [Hash] the element options
  #
  # source://tty-markdown//lib/tty/markdown/converter.rb#679
  def convert_math(el, opts); end

  # Convert ordered and unordered list element
  #
  # @api private
  # @param el [Kramdown::Element] the `kd:ul` or `kd:ol` element
  # @param opts [Hash] the element options
  #
  # source://tty-markdown//lib/tty/markdown/converter.rb#284
  def convert_ol(el, opts); end

  # Convert paragraph element
  #
  # @api private
  # @param el [Kramdown::Element] the `kd:p` element
  # @param opts [Hash] the element options
  #
  # source://tty-markdown//lib/tty/markdown/converter.rb#131
  def convert_p(el, opts); end

  # source://tty-markdown//lib/tty/markdown/converter.rb#739
  def convert_raw(*_arg0); end

  # Convert root element
  #
  # @api private
  # @param el [Kramdown::Element] the `kd:root` element
  # @param opts [Hash] the element options
  #
  # source://tty-markdown//lib/tty/markdown/converter.rb#69
  def convert_root(el, opts); end

  # Convert smart quote element
  #
  # @api private
  # @param el [Kramdown::Element] the `kd:smart_quote` element
  # @param opts [Hash] the element options
  #
  # source://tty-markdown//lib/tty/markdown/converter.rb#220
  def convert_smart_quote(el, opts); end

  # Convert strong element
  #
  # @api private
  # @param element [Kramdown::Element] the `kd:strong` element
  # @param opts [Hash] the element options
  #
  # source://tty-markdown//lib/tty/markdown/converter.rb#176
  def convert_strong(el, opts); end

  # Convert table element
  #
  # @api private
  # @param el [Kramdown::Element] the `kd:table` element
  # @param opts [Hash] the element options
  #
  # source://tty-markdown//lib/tty/markdown/converter.rb#353
  def convert_table(el, opts); end

  # Convert tbody element
  #
  # @api private
  # @param el [Kramdown::Element] the `kd:tbody` element
  # @param opts [Hash] the element options
  #
  # source://tty-markdown//lib/tty/markdown/converter.rb#496
  def convert_tbody(el, opts); end

  # Convert td element
  #
  # @api private
  # @param el [Kramdown::Element] the `kd:td` element
  # @param opts [Hash] the element options
  #
  # source://tty-markdown//lib/tty/markdown/converter.rb#586
  def convert_td(el, opts); end

  # Convert text element
  #
  # @api private
  # @param element [Kramdown::Element] the `kd:text` element
  # @param opts [Hash] the element options
  #
  # source://tty-markdown//lib/tty/markdown/converter.rb#161
  def convert_text(el, opts); end

  # Convert tfoot element
  #
  # @api private
  # @param el [Kramdown::Element] the `kd:tfoot` element
  # @param opts [Hash] the element options
  #
  # source://tty-markdown//lib/tty/markdown/converter.rb#529
  def convert_tfoot(el, opts); end

  # Convert thead element
  #
  # @api private
  # @param el [Kramdown::Element] the `kd:thead` element
  # @param opts [Hash] the element options
  #
  # source://tty-markdown//lib/tty/markdown/converter.rb#453
  def convert_thead(el, opts); end

  # Convert td element
  #
  # @api private
  # @param el [Kramdown::Element] the `kd:td` element
  # @param opts [Hash] the element options
  #
  # source://tty-markdown//lib/tty/markdown/converter.rb#545
  def convert_tr(el, opts); end

  # source://tty-markdown//lib/tty/markdown/converter.rb#704
  def convert_typographic_sym(el, opts); end

  # Convert ordered and unordered list element
  #
  # @api private
  # @param el [Kramdown::Element] the `kd:ul` or `kd:ol` element
  # @param opts [Hash] the element options
  #
  # source://tty-markdown//lib/tty/markdown/converter.rb#284
  def convert_ul(el, opts); end

  # Convert xml comment element
  #
  # @api private
  # @param element [Kramdown::Element] the `kd:xml_comment` element
  # @param opts [Hash] the element options
  #
  # source://tty-markdown//lib/tty/markdown/converter.rb#803
  def convert_xml_comment(el, opts); end

  # Distribute column widths inside total width
  #
  # @api private
  # @return [Array<Integer>]
  #
  # source://tty-markdown//lib/tty/markdown/converter.rb#387
  def distribute_widths(widths); end

  # Extract table data
  #
  # @api private
  # @param el [Kramdown::Element] the `kd:table` element
  #
  # source://tty-markdown//lib/tty/markdown/converter.rb#370
  def extract_table_data(el, opts); end

  # Create an ordered list of footnotes
  #
  # @api private
  # @param root [Kramdown::Element] the `kd:root` element
  # @param opts [Hash] the root element options
  #
  # source://tty-markdown//lib/tty/markdown/converter.rb#84
  def footnotes_list(root, opts); end

  # Process children of this element
  #
  # @api private
  # @param el [Kramdown::Element] the element with child elements
  #
  # source://tty-markdown//lib/tty/markdown/converter.rb#48
  def inner(el, opts); end

  # Calculate maximum cell height for a given row
  #
  # @api private
  # @return [Integer]
  #
  # source://tty-markdown//lib/tty/markdown/converter.rb#439
  def max_row_height(row, column_widths); end

  # Calculate maximum heights for each row
  #
  # @api private
  # @return [Array<Integer>]
  #
  # source://tty-markdown//lib/tty/markdown/converter.rb#428
  def max_row_heights(table_data, column_widths); end

  # Calculate maximum cell width for a given column
  #
  # @api private
  # @return [Integer]
  #
  # source://tty-markdown//lib/tty/markdown/converter.rb#417
  def max_width(table_data, col); end

  # Calculate maximum widths for each column
  #
  # @api private
  # @return [Array<Integer>]
  #
  # source://tty-markdown//lib/tty/markdown/converter.rb#406
  def max_widths(table_data); end

  # Convert codepoint to UTF-8 representation
  #
  # source://tty-markdown//lib/tty/markdown/converter.rb#713
  def unicode_char(codepoint); end
end

# source://tty-markdown//lib/tty/markdown/converter.rb#15
TTY::Markdown::Converter::NEWLINE = T.let(T.unsafe(nil), String)

# source://tty-markdown//lib/tty/markdown/converter.rb#16
TTY::Markdown::Converter::SPACE = T.let(T.unsafe(nil), String)

# @api public
#
# source://tty-markdown//lib/tty/markdown.rb#16
TTY::Markdown::SYMBOLS = T.let(T.unsafe(nil), Hash)

# Syntax highlighting for terminal code snippets
#
# @api private
#
# source://tty-markdown//lib/tty/markdown/syntax_highlighter.rb#11
module TTY::Markdown::SyntaxHighliter
  private

  # Return all available language lexers
  #
  # @api private
  # @return [Array[String]]
  #
  # source://tty-markdown//lib/tty/markdown/syntax_highlighter.rb#17
  def available_lexers; end

  # Guess langauge from code snippet
  #
  # @api private
  # @return [String, nil]
  #
  # source://tty-markdown//lib/tty/markdown/syntax_highlighter.rb#33
  def guess_lang(code); end

  # Highlight code snippet
  #
  # @api public
  # @param code [String]
  # @param mode [Integer] the color mode supported by the terminal
  # @param lang [String] the code snippet language
  # @param enabled [Boolean] whether or not coloring is enabled
  # @param color [Proc] the fallback coloring
  #
  # source://tty-markdown//lib/tty/markdown/syntax_highlighter.rb#54
  def highlight(code, mode: T.unsafe(nil), lang: T.unsafe(nil), enabled: T.unsafe(nil), color: T.unsafe(nil)); end

  class << self
    # Return all available language lexers
    #
    # @api private
    # @return [Array[String]]
    #
    # source://tty-markdown//lib/tty/markdown/syntax_highlighter.rb#17
    def available_lexers; end

    # Guess langauge from code snippet
    #
    # @api private
    # @return [String, nil]
    #
    # source://tty-markdown//lib/tty/markdown/syntax_highlighter.rb#33
    def guess_lang(code); end

    # Highlight code snippet
    #
    # @api public
    # @param code [String]
    # @param mode [Integer] the color mode supported by the terminal
    # @param lang [String] the code snippet language
    # @param enabled [Boolean] whether or not coloring is enabled
    # @param color [Proc] the fallback coloring
    #
    # source://tty-markdown//lib/tty/markdown/syntax_highlighter.rb#54
    def highlight(code, mode: T.unsafe(nil), lang: T.unsafe(nil), enabled: T.unsafe(nil), color: T.unsafe(nil)); end
  end
end

# @api public
#
# source://tty-markdown//lib/tty/markdown.rb#86
TTY::Markdown::THEME = T.let(T.unsafe(nil), Hash)

# source://tty-markdown//lib/tty/markdown/version.rb#5
TTY::Markdown::VERSION = T.let(T.unsafe(nil), String)
