# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for types exported from the `tty-pager` gem.
# Please instead update this file by running `bin/tapioca gem tty-pager`.

# source://tty-pager//lib/tty/pager/abstract.rb#3
module TTY; end

# source://tty-pager//lib/tty/pager/abstract.rb#4
module TTY::Pager
  extend ::TTY::Pager::ClassMethods
end

# source://tty-pager//lib/tty/pager/abstract.rb#5
class TTY::Pager::Abstract
  # Create a pager
  #
  # @api public
  # @param :input [IO] the object to send input to
  # @param :output [IO] the object to send output to
  # @param :enabled [Boolean] disable/enable text paging
  # @return [Abstract] a new instance of Abstract
  #
  # source://tty-pager//lib/tty/pager/abstract.rb#61
  def initialize(input: T.unsafe(nil), output: T.unsafe(nil), enabled: T.unsafe(nil), **_options); end

  # @raise [UndefinedMethodError]
  #
  # source://tty-pager//lib/tty/pager/abstract.rb#127
  def close(*_arg0); end

  # Check if pager is enabled
  #
  # @api public
  # @return [Boolean]
  #
  # source://tty-pager//lib/tty/pager/abstract.rb#72
  def enabled?; end

  # Page text
  #
  # @api public
  # @example
  #   page('some long text...')
  # @param text [String] the text to paginate
  #
  # source://tty-pager//lib/tty/pager/abstract.rb#85
  def page(text = T.unsafe(nil), path: T.unsafe(nil)); end

  # @raise [UndefinedMethodError]
  #
  # source://tty-pager//lib/tty/pager/abstract.rb#123
  def puts(*_arg0); end

  # Try writing to the pager. Return false if the pager was closed.
  #
  # In case of system pager, send text to
  # the pager process. Start a new process if it hasn't been
  # started yet.
  #
  # @api public
  # @param *args [Array<String>] strings to send to the pager
  # @return [Boolean] the success status of writing to the pager process
  #
  # source://tty-pager//lib/tty/pager/abstract.rb#112
  def try_write(*args); end

  # @raise [UndefinedMethodError]
  #
  # source://tty-pager//lib/tty/pager/abstract.rb#119
  def write(*_arg0); end

  protected

  # Returns the value of attribute input.
  #
  # source://tty-pager//lib/tty/pager/abstract.rb#135
  def input; end

  # Returns the value of attribute output.
  #
  # source://tty-pager//lib/tty/pager/abstract.rb#133
  def output; end

  class << self
    # Paginate content through null, basic or system pager.
    #
    # @api public
    # @param text [String] an optional blob of content
    # @param path [String] a path to a file
    #
    # source://tty-pager//lib/tty/pager/abstract.rb#16
    def page(text = T.unsafe(nil), path: T.unsafe(nil), **options, &block); end

    private

    # Disallow mixing input arguments
    #
    # @api private
    # @raise [IvalidArgument]
    #
    # source://tty-pager//lib/tty/pager/abstract.rb#39
    def validate_arguments(text, path, block); end
  end
end

# source://tty-pager//lib/tty/pager/abstract.rb#6
class TTY::Pager::Abstract::UndefinedMethodError < ::StandardError; end

# A basic pager is used to work on systems where
# system pager is not supported.
#
# @api public
#
# source://tty-pager//lib/tty/pager/basic.rb#15
class TTY::Pager::BasicPager < ::TTY::Pager::Abstract
  # Create a basic pager
  #
  # @api public
  # @param :height [Integer] the terminal height
  # @param :width [Integer] the terminal width
  # @param :prompt [Proc] a proc object that accepts page number
  # @return [BasicPager] a new instance of BasicPager
  #
  # source://tty-pager//lib/tty/pager/basic.rb#36
  def initialize(height: T.unsafe(nil), width: T.unsafe(nil), prompt: T.unsafe(nil), **options); end

  # Write text to the pager, prompting on page end.
  #
  # @api public
  # @raise [PagerClosed] if the pager was closed
  # @return [TTY::Pager::BasicPager]
  #
  # source://tty-pager//lib/tty/pager/basic.rb#55
  def <<(*args); end

  # Stop the pager, wait for it to clean up
  #
  # @api public
  #
  # source://tty-pager//lib/tty/pager/basic.rb#76
  def close; end

  # Print a line of text to the pager, prompting on page end.
  #
  # @api public
  # @raise [PagerClosed] if the pager was closed
  #
  # source://tty-pager//lib/tty/pager/basic.rb#69
  def puts(text); end

  # Write text to the pager, prompting on page end.
  #
  # @api public
  # @raise [PagerClosed] if the pager was closed
  # @return [TTY::Pager::BasicPager]
  #
  # source://tty-pager//lib/tty/pager/basic.rb#55
  def write(*args); end

  private

  # Check if paging should be continued
  #
  # @api private
  # @param page [Integer] the page number
  # @return [Boolean]
  #
  # source://tty-pager//lib/tty/pager/basic.rb#221
  def continue_paging?(input); end

  # Convert line to a chunk of text to fit display
  #
  # @api private
  # @param line [String]
  # @return [String]
  #
  # source://tty-pager//lib/tty/pager/basic.rb#167
  def create_chunk_from(line); end

  # Find available character reading method
  #
  # @api private
  #
  # source://tty-pager//lib/tty/pager/basic.rb#230
  def getchar; end

  # Switch over to the next page
  #
  # @api private
  #
  # source://tty-pager//lib/tty/pager/basic.rb#199
  def next_page; end

  # Dispaly prompt at page break
  #
  # @api private
  #
  # source://tty-pager//lib/tty/pager/basic.rb#209
  def page_break_prompt; end

  # Any remaining content
  #
  # @api private
  # @return [String]
  #
  # source://tty-pager//lib/tty/pager/basic.rb#192
  def remaining_content; end

  # Reset internal state
  #
  # @api private
  #
  # source://tty-pager//lib/tty/pager/basic.rb#86
  def reset; end

  # The lower-level common implementation of printing methods
  #
  # @api private
  # @return [Boolean] the success status of writing to the screen
  #
  # source://tty-pager//lib/tty/pager/basic.rb#140
  def send_text(write_method, text); end
end

# Default prompt for paging
#
# @api private
# @return [Proc]
#
# source://tty-pager//lib/tty/pager/basic.rb#24
TTY::Pager::BasicPager::DEFAULT_PROMPT = T.let(T.unsafe(nil), Proc)

# @api public
#
# source://tty-pager//lib/tty/pager/basic.rb#16
TTY::Pager::BasicPager::PAGE_BREAK = T.let(T.unsafe(nil), String)

# Tracks page cursor
#
# @api private
#
# source://tty-pager//lib/tty/pager/basic.rb#94
class TTY::Pager::BasicPager::PageCursor
  # @api private
  # @return [PageCursor] a new instance of PageCursor
  #
  # source://tty-pager//lib/tty/pager/basic.rb#97
  def initialize(height); end

  # Move coursor down the page by count
  #
  # @api public
  # @param count [Integer]
  #
  # source://tty-pager//lib/tty/pager/basic.rb#120
  def down_by(count); end

  # Move cursor to the next page
  #
  # @api public
  #
  # source://tty-pager//lib/tty/pager/basic.rb#110
  def next_page; end

  # Check if time to break a page
  #
  # @api private
  # @return [Boolean]
  #
  # source://tty-pager//lib/tty/pager/basic.rb#129
  def page_break?; end

  # @api private
  #
  # source://tty-pager//lib/tty/pager/basic.rb#95
  def page_num; end

  # @api private
  #
  # source://tty-pager//lib/tty/pager/basic.rb#102
  def reset; end
end

# source://tty-pager//lib/tty/pager.rb#18
module TTY::Pager::ClassMethods
  # Create a pager
  #
  # @api public
  # @param :enabled [Boolean] disable/enable text paging
  # @param :command [String] the paging command
  # @param :input [IO] the object to send input to
  # @param :output [IO] the object to send output to
  # @param :prompt [Proc] a proc object that accepts page number
  # @param :width [Integer] the terminal width
  # @param :height [Integer] the terminal height
  #
  # source://tty-pager//lib/tty/pager.rb#37
  def new(enabled: T.unsafe(nil), command: T.unsafe(nil), **options); end

  # Paginate content through null, basic or system pager.
  #
  # @api public
  # @example
  #   TTY::Pager.page do |pager|
  #   pager.write "some text"
  #   end
  # @param :path [String] a path to a file
  # @param :enabled [Boolean] whether or not to use null pager
  # @param :command [String] the paging command
  # @param :input [IO] the object to send input to
  # @param :output [IO] the object to send output to
  # @param :text [String] an optional blob of content
  #
  # source://tty-pager//lib/tty/pager.rb#63
  def page(text = T.unsafe(nil), path: T.unsafe(nil), enabled: T.unsafe(nil), command: T.unsafe(nil), **options, &block); end

  # Select an appriopriate pager
  #
  # If the user disabled paging then a NullPager is returned,
  # otherwise a check is performed to find native system
  # command to perform pagination with SystemPager. Finally,
  # if no system command is found, a BasicPager is used which
  # is a pure Ruby implementation known to work on any platform.
  #
  # @api private
  # @param enabled [Boolean] whether or not to allow paging
  # @param command [String] the command to run if available
  #
  # source://tty-pager//lib/tty/pager.rb#84
  def select_pager(enabled: T.unsafe(nil), command: T.unsafe(nil)); end
end

# source://tty-pager//lib/tty/pager.rb#10
class TTY::Pager::Error < ::StandardError; end

# Raised when user provides unnexpected argument
#
# source://tty-pager//lib/tty/pager.rb#16
class TTY::Pager::InvalidArgument < ::TTY::Pager::Error; end

# source://tty-pager//lib/tty/pager/null.rb#10
class TTY::Pager::NullPager < ::TTY::Pager::Abstract
  # Pass output directly to stdout
  #
  # @api public
  #
  # source://tty-pager//lib/tty/pager/null.rb#11
  def <<(text); end

  # Do nothing, always return success
  #
  # @api public
  #
  # source://tty-pager//lib/tty/pager/null.rb#30
  def close; end

  # Pass output directly to stdout
  #
  # @api public
  #
  # source://tty-pager//lib/tty/pager/null.rb#21
  def puts(text); end

  # Pass output directly to stdout
  #
  # @api public
  #
  # source://tty-pager//lib/tty/pager/null.rb#11
  def write(text); end
end

# Raised when pager is closed
#
# source://tty-pager//lib/tty/pager.rb#13
class TTY::Pager::PagerClosed < ::TTY::Pager::Error; end

# A system pager is used  on systems where native
# pagination exists
#
# @api public
#
# source://tty-pager//lib/tty/pager/system.rb#25
class TTY::Pager::SystemPager < ::TTY::Pager::Abstract
  # Create a system pager
  #
  # @api public
  # @param :command [String] the command to use for paging
  # @return [SystemPager] a new instance of SystemPager
  #
  # source://tty-pager//lib/tty/pager/system.rb#120
  def initialize(command: T.unsafe(nil), **options); end

  # Send text to the pager process. Starts a new process if it hasn't been
  # started yet.
  #
  # @api public
  # @param *args [Array<String>] strings to send to the pager
  # @raise [PagerClosed] strings to send to the pager
  #
  # source://tty-pager//lib/tty/pager/system.rb#144
  def <<(*args); end

  # Stop the pager, wait for the process to finish. If no pager has been
  # started, returns true.
  #
  # @api public
  # @return [Boolean] the exit status of the child process
  #
  # source://tty-pager//lib/tty/pager/system.rb#173
  def close; end

  # Send a line of text, ending in a newline, to the pager process. Starts
  # a new process if it hasn't been started yet.
  #
  # @api public
  # @raise [PagerClosed] if the pager was closed
  # @return [SystemPager]
  #
  # source://tty-pager//lib/tty/pager/system.rb#160
  def puts(text); end

  # Send text to the pager process. Starts a new process if it hasn't been
  # started yet.
  #
  # @api public
  # @param *args [Array<String>] strings to send to the pager
  # @raise [PagerClosed] strings to send to the pager
  #
  # source://tty-pager//lib/tty/pager/system.rb#144
  def write(*args); end

  private

  # The pager command to run
  #
  # @api private
  # @return [String] the name of executable to run
  #
  # source://tty-pager//lib/tty/pager/system.rb#189
  def pager_command(*commands); end

  # Spawn the pager process
  #
  # @api private
  # @return [PagerIO] A wrapper for the external pager
  #
  # source://tty-pager//lib/tty/pager/system.rb#203
  def spawn_pager; end

  class << self
    # Check if command exists
    #
    # @api private
    # @example
    #   command_exist?("less") # => true
    # @param command [String] the command to check
    # @return [Boolean]
    #
    # source://tty-pager//lib/tty/pager/system.rb#26
    def command_exist?(command); end

    # Check if command is available
    #
    # @api public
    # @example Basic usage
    #   available?  # => true
    # @example Usage with command
    #   available?("less") # => true
    # @return [Boolean]
    #
    # source://tty-pager//lib/tty/pager/system.rb#110
    def exec_available?(*commands); end

    # List possible executables for output paging
    #
    # The UNIX systems often come with "pg" and "more" but no "less" utility.
    # The Linux usually provides "less" and "more" pager, but often no "pg".
    # MacOS comes with "less" and "more" pager and no "pg".
    # Windows provides "more".
    # The "more" pager is the oldest utility and thus most compatible
    # with many systems.
    #
    # @api private
    # @return [Array[String]]
    #
    # source://tty-pager//lib/tty/pager/system.rb#65
    def executables; end

    # Find first available termainal pager program executable
    #
    # @api public
    # @example Basic usage
    #   find_executable # => "less"
    # @example Usage with commands
    #   find_executable("less", "cat")  # => "less"
    # @param commands [Array[String]]
    # @return [String, nil] the found executable or nil when not found
    #
    # source://tty-pager//lib/tty/pager/system.rb#92
    def find_executable(*commands); end

    # Run pager command silently with no input and capture output
    #
    # @api private
    # @return [Boolean] true if command runs successfully, false otherwise
    #
    # source://tty-pager//lib/tty/pager/system.rb#46
    def run_command(*args); end

    private

    # Finds git pager configuration
    #
    # @api private
    #
    # source://tty-pager//lib/tty/pager/system.rb#73
    def git_pager; end
  end
end

# A wrapper for an external process.
#
# @api private
#
# source://tty-pager//lib/tty/pager/system.rb#220
class TTY::Pager::SystemPager::PagerIO
  # @api private
  # @return [PagerIO] a new instance of PagerIO
  #
  # source://tty-pager//lib/tty/pager/system.rb#221
  def initialize(command); end

  # @api private
  #
  # source://tty-pager//lib/tty/pager/system.rb#235
  def close; end

  # @api private
  #
  # source://tty-pager//lib/tty/pager/system.rb#231
  def puts(*args); end

  # @api private
  #
  # source://tty-pager//lib/tty/pager/system.rb#227
  def write(*args); end

  private

  # @api private
  #
  # source://tty-pager//lib/tty/pager/system.rb#249
  def io_call(method_name, *args); end
end

# source://tty-pager//lib/tty/pager/version.rb#5
TTY::Pager::VERSION = T.let(T.unsafe(nil), String)
